@page "/dailyevents"
@rendermode InteractiveServer
@attribute [StreamRendering]

@using ExampleOOPWebApp.Models;
@using ExampleOOPWebApp.Service.Contracts;
@inject IEventsItemService eventItemService;

<h3>Daily Events</h3>

@if (eventItems == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Is Complete</th>
                <th>Remark</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in eventItems)
            {
                <tr>
                    <td>@item.Id</td>
                    <td>@item.Name</td>
                    <td>@item.IsComplete.ToString()</td>
                    <td>@item.Remark</td>
                </tr>
            }
        </tbody>
    </table>
}

<input placeholder="Event Item Name:" @bind="newEventItemName" />
<input placeholder="Event Item Remak:" @bind="newEventItemRemark" />
<button @onclick="AddEventItem">Add Event</button>


@code {
    private IList<EventsItem> eventItems;
    private string? newEventItemName;
    private string? newEventItemRemark;

    protected override async Task OnInitializedAsync()
    {
        eventItems = await eventItemService.GetEventItemsAsync();
    }

    private async void AddEventItem()
    {
        if (string.IsNullOrWhiteSpace(newEventItemName))
        {
            return;
        }

        var eventItem = new EventsItem { Name = newEventItemName, Remark = newEventItemRemark };
        await eventItemService.AddEventItemAsync(eventItem);

        // Clear Textboxes
        newEventItemName = string.Empty;
        newEventItemRemark = string.Empty;

        // Refresh Event Items
        eventItems = await eventItemService.GetEventItemsAsync();
    }
}
